########################################################################
#   This Makefile shows how to compile all C++, C and Fortran
#   files found in $(SRCDIR) directory.
#   Linking is done with g++. Need to have $ROOTSYS defined
########################################################################

########################################################################
MYOS        := $(shell uname)
ARCH        := $(shell uname -m)
USER        := $(shell whoami)
MYHOST      := $(shell hostname -s)

########################################################################
G4TARGET    := G4MC
LIBFILE     := lib$(G4TARGET).a
EXEFILE     := $(basename $(G4TARGET))

########################################################################
SRCDIR      := src
INCDIR      := include
OBJDIR      := obj.$(ARCH)

########################################################################
MODELDIR    := XSModel:HRSTransport

MODELLIST   := $(subst :, ,$(MODELDIR))
MODELINCDIR := $(foreach n,$(MODELLIST),$(n) $(n)/include)
INCDIR      += . $(MODELINCDIR)
MODELLIBS   := $(foreach n,$(MODELLIST),-L$(n)/$(OBJDIR) -l$(n))
########################################################################
# Compiler
AR          := ar
CXX         := g++
FF          := gfortran
LD          := g++

########################################################################
# Flags
ifeq ($(ARCH),i686)
    MODE    := -m32
else
    MODE    := -m64
endif
INCDIRS     := $(patsubst %,-I%,$(subst :, ,$(INCDIR)))
CFLAGS      := -Wall -fPIC -O3 -g $(MODE) $(INCDIRS)
CXXFLAGS    := -Wall -fPIC -O3 -g $(MODE) $(INCDIRS) 
FFLAGS      := -Wall -fPIC -O3 -g $(MODE) $(INCDIRS)
ifeq ($(MYOS),Darwin) 
#in Darwin, do not use -fno-leading-underscore
    FFLAGS  += -fno-second-underscore -fno-automatic -fbounds-check \
               -fno-range-check -funroll-all-loops -fdollar-ok \
               -ffixed-line-length-none -fno-range-check
else
    FFLAGS  += -fno-leading-underscore -fno-second-underscore \
               -fno-automatic -fbounds-check -funroll-all-loops \
               -fdollar-ok -ffixed-line-length-none -fno-range-check
endif
GPPFLAGS    := -MM
LDFLAGS     := -O3 -g $(MODE)

########################################################################
# Generate obj file list
FSOURCES    := $(wildcard $(SRCDIR)/*.[Ff])
CSOURCES    := $(wildcard $(SRCDIR)/*.[Cc]) 
CSOURCES    += $(wildcard $(SRCDIR)/*.[Cc][Cc])
CSOURCES    += $(wildcard $(SRCDIR)/*.[Cc][XxPp][XxPp])
CSOURCES    += $(G4TARGET).cc 
SOURCES     := $(FSOURCES) $(CSOURCES) 
# header files
HEADERS     := $(foreach n,$(subst :, ,$(INCDIR)),$(wildcard $(n)/*.hh))
# add .o to all the source files
OBJS        := $(addsuffix .o, $(basename $(SOURCES)))
OBJS        := $(patsubst  $(SRCDIR)/%.o,$(OBJDIR)/%.o,$(OBJS))
OBJS        := $(patsubst  $(G4TARGET).o,$(OBJDIR)/$(G4TARGET).o,$(OBJS))
DEPS        := $(subst .o,.d,$(OBJS))

########################################################################
# Libs
SYSLIBS     := -lstdc++ -lgfortran
OTHERLIBS   := $(MODELLIBS)

########################################################################
# ROOT configure
ROOTCFLAGS  := $(shell root-config --cflags)
ROOTLIBS    := $(shell root-config --libs)
ROOTGLIBS   := $(shell root-config --glibs) -lMinuit

G4CFLAGS    := $(shell geant4-config --cflags)
G4LIBS      := $(shell geant4-config --libs)
########################################################################
# geant4-config does not add visulization or UI stuff
# I need to add them manually
G4CFLAGS    += -DG4VERBOSE -DG4_STORE_TRAJECTORY  -DG4UI_USE_TCSH \
 -DG4UI_USE_QT -DG4UI_USE\
 -DG4VIS_USE_ASCIITREE -DG4VIS_USE_DAWNFILE -DG4VIS_USE_GMOCRENFILE \
 -DG4VIS_USE_HEPREPFILE -DG4VIS_USE_RAYTRACER -DG4VIS_USE_VRMLFILE \
 -DG4VIS_USE_OPENGLX -DG4VIS_USE_OPENGLQT -DG4VIS_USE_OPENGL -DG4VIS_USE

G4LIBS      +=  -L/usr/lib64 -lQtCore_debug -lQtGui -L/lib64 -lGLU -lGL \
 -L/usr/X11R6/lib64 -lXmu -lXt -lXext -lX11 -lXi -lSM -lICE -lexpat -lz -lm

########################################################################

CXXFLAGS    += $(ROOTCFLAGS) $(G4CFLAGS)
LIBS        := $(SYSLIBS) $(ROOTLIBS) $(G4LIBS)
GLIBS       := $(SYSLIBS) $(ROOTGLIBS) $(G4LIBS)

########################################################################
# You can specify the .SUFFIXES
.SUFFIXES: .c .C .cc .CC .cpp .cxx .f .F
.PHONY: all clean test
VPATH       := $(SRCDIR)

########################################################################
all: exe

########################################################################
# Make the $(TARGET).d file and include it.
$(OBJDIR)/%.d: %.c 
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.C 
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.cc
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.CC
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.cpp 
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.cxx
	@echo Making dependency for file $< ......
	@set -e; \
	$(CXX) $(GPPFLAGS) $(CXXFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.f
	@echo Making dependency for file $< ......
	@set -e; \
	$(FF) -cpp $(GPPFLAGS) $(FFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

$(OBJDIR)/%.d: %.F
	@echo Making dependency for file $< ......
	@set -e; \
	$(FF) -cpp $(GPPFLAGS) $(FFLAGS) $< | \
	sed 's!$*\.o!$(OBJDIR)/& $@!' > $@; \
	[ -s $@ ] || rm -f $@

ifneq ($(DEPS),)
-include $(DEPS)
endif

########################################################################
exe: dir lib
#@$(LD) $(LDFLAGS) -o $(EXEFILE) $(OBJS) $(LIBS) $(OTHERLIBS)
	@$(LD) $(LDFLAGS) -o $(EXEFILE) $(OBJDIR)/$(LIBFILE) $(LIBS) $(OTHERLIBS)
	@echo "Linking $(EXEFILE) ...... done!"

########################################################################
$(OBJDIR)/%.o: %.c
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.C
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.cc
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.CC
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.cpp
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.cxx
	@echo Compiling $< ......
	@$(CXX) -c $< -o $@  $(CXXFLAGS)

$(OBJDIR)/%.o: %.f
	@echo Compiling $< ......
	@$(FF) -c $< -o $@  $(FFLAGS)

$(OBJDIR)/%.o: %.F
	@echo Compiling $< ......
	@$(FF) -c $< -o $@  $(FFLAGS)

dir:
	@if [ ! -d $(OBJDIR) ] ; then mkdir -p $(OBJDIR) ;fi

########################################################################
clean: dir
	@rm -f $(OBJDIR)/*
	@rm -f $(EXEFILE)
	@rm -f *~ *# */*~ */*#

distclean: clean
	@for model in $(MODELDIR); do \
		if [[ -d $$model ]]; then \
			make clean -s -C $$model; \
		fi; \
	done;

test:	
	@echo \\MYOS\:$(MYOS) \\ARCH\:$(ARCH)
	@echo \\CFLAGS\:$(CFLAGS)	
	@echo \\CXXFLAGS\:$(CXXFLAGS)        
	@echo \\FFLAGS\:$(FFLAGS)
	@echo \\LDFLAGS\:$(LDFLAGS)
	@echo \\SYSLIBS\:$(SYSLIBS)
	@echo \\fsources\: $(FSOURCES)	
	@echo \\sources\: $(SOURCES)
	@echo \\headers\: $(HEADERS)
	@echo \\objs\: $(OBJS)	
	@echo \\dependencies: \$(DEPS)
lib: $(OBJS)
	@for model in $(MODELLIST); do \
		if [[ -d $$model ]]; then \
			make lib -s -C $$model; \
		fi; \
	done;
	@$(AR) -r $(OBJDIR)/$(LIBFILE) $(OBJS) $(OTHEROBJS) &>/dev/null
	@echo "Linking $(LIBFILE) ...... done!"



help: test

env: test
